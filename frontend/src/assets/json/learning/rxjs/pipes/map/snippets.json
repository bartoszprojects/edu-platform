{
  "basics1": "<!-- HTML generated using hilite.me --><div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><table><tr><td><pre style=\"margin: 0; line-height: 125%\">1\n2\n3\n4\n5\n6\n7\n8\n9</pre></td><td><pre style=\"margin: 0; line-height: 125%\">    <span style=\"color: #008800; font-style: italic\">// Map</span>\n    <span style=\"color: #008800; font-style: italic\">// I am using &#39;map&#39; operator when I want to make any operation on data flowing through the Stream before subscribing</span>\n\n    <span style=\"color: #008800; font-style: italic\">// ------------------------------------------------------------</span>\n\n    <span style=\"color: #000080; font-weight: bold\">const</span> myObs1: <span style=\"color: #000080; font-weight: bold\">Observable</span>&lt;<span style=\"color: #000080; font-weight: bold\">number</span>&gt; = from([<span style=\"color: #0000FF\">1</span>,<span style=\"color: #0000FF\">2</span>,<span style=\"color: #0000FF\">3</span>,<span style=\"color: #0000FF\">4</span>,<span style=\"color: #0000FF\">5</span>,<span style=\"color: #0000FF\">6</span>])\n    myObs1\n      .pipe(map((element) =&gt; element * <span style=\"color: #0000FF\">10</span>))\n      .subscribe((result) =&gt; console.log(result))\n</pre></td></tr></table></div>\n",
  "basics2": "<!-- HTML generated using hilite.me --><div style=\"background: #ffffff; overflow:auto;width:auto;padding: 10px 10px;border-radius:5px; background: #ae96761a\"><table><tr><td><pre style=\"margin: 0; line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10</pre></td><td><pre style=\"margin: 0; line-height: 125%\">    <span style=\"color: #000080; font-weight: bold\">interface</span> myInterface { name: <span style=\"color: #000080; font-weight: bold\">string</span>, age: <span style=\"color: #000080; font-weight: bold\">number</span> }\n    <span style=\"color: #000080; font-weight: bold\">const</span> myObj1: <span style=\"color: #000080; font-weight: bold\">myInterface</span>[] = [ { name: <span style=\"color: #0000FF\">&#39;name1&#39;</span>, age: <span style=\"color: #000080; font-weight: bold\">20</span> }, { name: <span style=\"color: #0000FF\">&#39;name2&#39;</span>, age: <span style=\"color: #000080; font-weight: bold\">30</span> } ]\n    \n    <span style=\"color: #000080; font-weight: bold\">const</span> myObs2: <span style=\"color: #000080; font-weight: bold\">Observable</span>&lt;myInterface&gt; = from(myObj1)\n    \n    <span style=\"color: #008800; font-style: italic\">// we can map each element from the Stream and add, change object scheme inside map operator</span>\n    myObs2.pipe(map((element: <span style=\"color: #000080; font-weight: bold\">myInterface</span>): myInterface &amp; { extra: <span style=\"color: #000080; font-weight: bold\">string</span> } =&gt; {\n      <span style=\"color: #000080; font-weight: bold\">return</span> { ...element, extra: <span style=\"color: #0000FF\">&#39;extraInfo&#39;</span>}\n    }))\n      .subscribe((result) =&gt; console.log(result))\n</pre></td></tr></table></div>\n"
}
