
  {
    "types1": "<!-- HTML generated using hilite.me --><div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><table><tr><td><pre style=\"margin: 0; line-height: 125%\">  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133</pre></td><td><pre style=\"margin: 0; line-height: 125%\">  basicsTypes1() {\n    <span style=\"color: #008800; font-style: italic\">// Basic types</span>\n\n    <span style=\"color: #008800; font-style: italic\">// ------------------------------------------------------------------</span>\n    <span style=\"color: #008800; font-style: italic\">// PRIMITIVE TYPES</span>\n    <span style=\"color: #008800; font-style: italic\">// these types are used to define short type for normal variables</span>\n    <span style=\"color: #000080; font-weight: bold\">const</span> myString: <span style=\"color: #000080; font-weight: bold\">string</span> = <span style=\"color: #0000FF\">&#39;myString&#39;</span>;\n    <span style=\"color: #000080; font-weight: bold\">const</span> myNumber: <span style=\"color: #000080; font-weight: bold\">number</span> = <span style=\"color: #0000FF\">1</span>;\n    <span style=\"color: #000080; font-weight: bold\">const</span> myBoolean: <span style=\"color: #000080; font-weight: bold\">boolean</span> = <span style=\"color: #000080; font-weight: bold\">true</span>;\n    <span style=\"color: #000080; font-weight: bold\">const</span> myNull : <span style=\"color: #000080; font-weight: bold\">null</span> = <span style=\"color: #000080; font-weight: bold\">null</span>;\n    <span style=\"color: #000080; font-weight: bold\">const</span> myUndefined: <span style=\"color: #000080; font-weight: bold\">undefined</span> = <span style=\"color: #000080; font-weight: bold\">undefined</span>;\n\n    <span style=\"color: #008800; font-style: italic\">// ------------------------------------------------------------------</span>\n    <span style=\"color: #008800; font-style: italic\">// SPECIAL TYPES</span>\n    <span style=\"color: #008800; font-style: italic\">// these types are used for functions or object properties</span>\n\n    <span style=\"color: #008800; font-style: italic\">// VOID - this type means that there is no return.</span>\n    <span style=\"color: #008800; font-style: italic\">// return = null || return = undefined</span>\n    <span style=\"color: #000080; font-weight: bold\">function</span> voidExample1(): <span style=\"color: #000080; font-weight: bold\">void</span> {\n      console.log(<span style=\"color: #0000FF\">&#39;Hello!&#39;</span>)\n    }\n\n    <span style=\"color: #008800; font-style: italic\">// -------------------------------</span>\n\n    <span style=\"color: #008800; font-style: italic\">// NEVER - this type means that this func will never produce any return</span>\n    <span style=\"color: #008800; font-style: italic\">// return = ??</span>\n    <span style=\"color: #000080; font-weight: bold\">function</span> neverExample1(): never {\n      <span style=\"color: #000080; font-weight: bold\">throw</span> <span style=\"color: #000080; font-weight: bold\">new</span> Error();\n    }\n    <span style=\"color: #000080; font-weight: bold\">function</span> neverExample2(): Promise&lt;never&gt; {\n      <span style=\"color: #000080; font-weight: bold\">while</span> (<span style=\"color: #000080; font-weight: bold\">true</span>) {\n        console.log(<span style=\"color: #0000FF\">&#39;This func will never ends and never produce any return value&#39;</span>)\n      }\n    }\n\n    <span style=\"color: #008800; font-style: italic\">// -------------------------------</span>\n\n    <span style=\"color: #008800; font-style: italic\">// ANY - this type means that the function may return any type</span>\n    <span style=\"color: #008800; font-style: italic\">// return = string | number | boolean | ...anything</span>\n    <span style=\"color: #000080; font-weight: bold\">function</span> anyExample1(): any {\n      <span style=\"color: #000080; font-weight: bold\">return</span> [<span style=\"color: #0000FF\">&#39;1&#39;</span>,[[[<span style=\"color: #0000FF\">3</span>,<span style=\"color: #0000FF\">4</span>,<span style=\"color: #0000FF\">&#39;1&#39;</span>,[<span style=\"color: #0000FF\">1</span>,<span style=\"color: #0000FF\">2</span>,<span style=\"color: #0000FF\">3</span>]]]]]\n    }\n\n    <span style=\"color: #008800; font-style: italic\">// -------------------------------</span>\n\n    <span style=\"color: #008800; font-style: italic\">// UNKNOWN - this type means that the function may return any type but you cannon assign any properties to this vra</span>\n    <span style=\"color: #008800; font-style: italic\">// return = string | number | boolean | ...anything</span>\n    <span style=\"color: #000080; font-weight: bold\">const</span> unknown1: <span style=\"color: #000080; font-weight: bold\">unknown</span> = <span style=\"color: #0000FF\">&#39;unknown1&#39;</span>\n    <span style=\"color: #008800; font-style: italic\">// const unknown1Length: number = unknown1.length // error</span>\n\n    <span style=\"color: #008800; font-style: italic\">// ------------------------------------------------------------------</span>\n    <span style=\"color: #008800; font-style: italic\">// ADVANCED TYPES</span>\n\n    <span style=\"color: #008800; font-style: italic\">// Arrays</span>\n\n    <span style=\"color: #000080; font-weight: bold\">const</span> array1: <span style=\"color: #000080; font-weight: bold\">string</span>[] = [<span style=\"color: #0000FF\">&#39;1&#39;</span>,<span style=\"color: #0000FF\">&#39;2&#39;</span>,<span style=\"color: #0000FF\">&#39;3&#39;</span>,<span style=\"color: #0000FF\">&#39;4&#39;</span>,<span style=\"color: #0000FF\">&#39;5&#39;</span>]\n    <span style=\"color: #000080; font-weight: bold\">const</span> array2: <span style=\"color: #000080; font-weight: bold\">number</span>[] = [<span style=\"color: #0000FF\">1</span>,<span style=\"color: #0000FF\">2</span>,<span style=\"color: #0000FF\">3</span>,<span style=\"color: #0000FF\">4</span>,<span style=\"color: #0000FF\">5</span>,<span style=\"color: #0000FF\">6</span>,<span style=\"color: #0000FF\">7</span>,<span style=\"color: #0000FF\">8</span>,<span style=\"color: #0000FF\">9</span>,<span style=\"color: #0000FF\">10</span>]\n    <span style=\"color: #000080; font-weight: bold\">const</span> array3: <span style=\"color: #000080; font-weight: bold\">boolean</span>[] = [<span style=\"color: #000080; font-weight: bold\">true</span>, <span style=\"color: #000080; font-weight: bold\">true</span>, <span style=\"color: #000080; font-weight: bold\">true</span>, <span style=\"color: #000080; font-weight: bold\">false</span>, <span style=\"color: #000080; font-weight: bold\">true</span>]\n\n    <span style=\"color: #008800; font-style: italic\">// Unions</span>\n\n    <span style=\"color: #000080; font-weight: bold\">const</span> mixedVar1: <span style=\"color: #000080; font-weight: bold\">string</span> | <span style=\"color: #000080; font-weight: bold\">number</span> = <span style=\"color: #0000FF\">1</span>\n    <span style=\"color: #000080; font-weight: bold\">const</span> mixedVar2: <span style=\"color: #000080; font-weight: bold\">string</span> | <span style=\"color: #000080; font-weight: bold\">number</span> = <span style=\"color: #0000FF\">&#39;1&#39;</span>\n    <span style=\"color: #000080; font-weight: bold\">const</span> mixedVar3: <span style=\"color: #000080; font-weight: bold\">string</span> | <span style=\"color: #000080; font-weight: bold\">number</span> | <span style=\"color: #000080; font-weight: bold\">boolean</span> = <span style=\"color: #0000FF\">&#39;1&#39;</span>\n\n    <span style=\"color: #000080; font-weight: bold\">const</span> mixedArray1: <span style=\"color: #000080; font-weight: bold\">Array</span>&lt;<span style=\"color: #000080; font-weight: bold\">string</span> | <span style=\"color: #000080; font-weight: bold\">number</span>&gt; = [<span style=\"color: #0000FF\">&#39;1&#39;</span>, <span style=\"color: #0000FF\">&#39;2&#39;</span>, <span style=\"color: #0000FF\">3</span>, <span style=\"color: #0000FF\">4</span>]\n    <span style=\"color: #000080; font-weight: bold\">const</span> mixedArray2: (<span style=\"color: #000080; font-weight: bold\">string</span> | <span style=\"color: #000080; font-weight: bold\">number</span>)[] = [<span style=\"color: #0000FF\">&#39;1&#39;</span>, <span style=\"color: #0000FF\">&#39;2&#39;</span>, <span style=\"color: #0000FF\">3</span>, <span style=\"color: #0000FF\">4</span>];\n    <span style=\"color: #000080; font-weight: bold\">const</span> mixedArray3: (<span style=\"color: #000080; font-weight: bold\">number</span>[] | <span style=\"color: #000080; font-weight: bold\">string</span>[]) = [<span style=\"color: #0000FF\">&#39;1&#39;</span>, <span style=\"color: #0000FF\">&#39;2&#39;</span>, <span style=\"color: #0000FF\">&#39;3&#39;</span>, <span style=\"color: #0000FF\">&#39;4&#39;</span>];\n    <span style=\"color: #000080; font-weight: bold\">const</span> mixedArray4: (<span style=\"color: #000080; font-weight: bold\">number</span>[] | <span style=\"color: #000080; font-weight: bold\">string</span>[]) = [<span style=\"color: #0000FF\">1</span>,<span style=\"color: #0000FF\">2</span>,<span style=\"color: #0000FF\">3</span>,<span style=\"color: #0000FF\">4</span>,<span style=\"color: #0000FF\">5</span>,<span style=\"color: #0000FF\">6</span>];\n\n    <span style=\"color: #008800; font-style: italic\">// Object Types</span>\n\n    <span style=\"color: #000080; font-weight: bold\">const</span> obj1: { name: <span style=\"color: #000080; font-weight: bold\">string</span>; age: <span style=\"color: #000080; font-weight: bold\">number</span> } = { name: <span style=\"color: #0000FF\">&quot;Alice&quot;</span>,  age: <span style=\"color: #000080; font-weight: bold\">30</span>};\n    <span style=\"color: #000080; font-weight: bold\">function</span> obj2(person: { name: <span style=\"color: #000080; font-weight: bold\">string</span>; age: <span style=\"color: #000080; font-weight: bold\">number</span> }) {\n      <span style=\"color: #000080; font-weight: bold\">return</span> <span style=\"color: #0000FF\">&quot;Hello &quot;</span> + person.name;\n    }\n\n    <span style=\"color: #008800; font-style: italic\">// Interface Types</span>\n    <span style=\"color: #008800; font-style: italic\">// Using interface you can build bigger scheme of your data shape</span>\n\n    <span style=\"color: #000080; font-weight: bold\">interface</span> Person {\n      name: <span style=\"color: #000080; font-weight: bold\">string</span>;\n      surname: <span style=\"color: #000080; font-weight: bold\">string</span>;\n      age: <span style=\"color: #000080; font-weight: bold\">number</span>;\n      extraInfo?: <span style=\"color: #000080; font-weight: bold\">string</span>;\n    }\n\n    <span style=\"color: #000080; font-weight: bold\">let</span> person1: <span style=\"color: #000080; font-weight: bold\">Person</span> = {\n      name: <span style=\"color: #0000FF\">&#39;name1&#39;</span>,\n      surname: <span style=\"color: #0000FF\">&#39;surname1&#39;</span>,\n      age: <span style=\"color: #000080; font-weight: bold\">25</span>\n    }\n\n    <span style=\"color: #008800; font-style: italic\">// Type Aliases</span>\n    <span style=\"color: #008800; font-style: italic\">// Using type aliases you can create your own shorter data shape</span>\n    <span style=\"color: #000080; font-weight: bold\">interface</span> myInterface1 { name: <span style=\"color: #000080; font-weight: bold\">string</span>, age: <span style=\"color: #000080; font-weight: bold\">number</span> }\n    type myUnionType1 = <span style=\"color: #000080; font-weight: bold\">string</span> | <span style=\"color: #000080; font-weight: bold\">boolean</span> | <span style=\"color: #000080; font-weight: bold\">number</span> | myInterface1\n    <span style=\"color: #000080; font-weight: bold\">const</span> myFunc1 = (): myUnionType1 =&gt; <span style=\"color: #0000FF\">&#39;&#39;</span>\n\n\n    <span style=\"color: #008800; font-style: italic\">// Type Tuples</span>\n    <span style=\"color: #008800; font-style: italic\">// Using tuples you can create scheme of your array but this force you to use certain order!</span>\n\n    <span style=\"color: #000080; font-weight: bold\">let</span> tupleType1: [<span style=\"color: #000080; font-weight: bold\">string</span>, <span style=\"color: #000080; font-weight: bold\">number</span>, <span style=\"color: #000080; font-weight: bold\">string</span>] = [<span style=\"color: #0000FF\">&quot;apple&quot;</span>, <span style=\"color: #0000FF\">3</span>, <span style=\"color: #0000FF\">&#39;3&#39;</span>];\n\n    <span style=\"color: #008800; font-style: italic\">// Type Intersections</span>\n    <span style=\"color: #008800; font-style: italic\">// Using intersections you can join multi types!</span>\n\n    type A = { foo: <span style=\"color: #000080; font-weight: bold\">number</span> };\n    type B = { bar: <span style=\"color: #000080; font-weight: bold\">string</span> };\n    type C = A &amp; B\n    <span style=\"color: #000080; font-weight: bold\">let</span> result: <span style=\"color: #000080; font-weight: bold\">C</span> = { foo: <span style=\"color: #000080; font-weight: bold\">42</span>, bar: <span style=\"color: #0000FF\">&quot;Hello&quot;</span> };\n\n    <span style=\"color: #008800; font-style: italic\">// -------------------------------</span>\n\n    <span style=\"color: #000080; font-weight: bold\">interface</span> interface1 { city: <span style=\"color: #000080; font-weight: bold\">string</span>, country: <span style=\"color: #000080; font-weight: bold\">string</span> }\n    <span style=\"color: #000080; font-weight: bold\">interface</span> interface2 { street: <span style=\"color: #000080; font-weight: bold\">string</span>}\n\n    <span style=\"color: #000080; font-weight: bold\">function</span> joinTypes(data: <span style=\"color: #000080; font-weight: bold\">interface1</span> &amp; interface2): any {\n      <span style=\"color: #000080; font-weight: bold\">return</span> data\n    }\n    <span style=\"color: #008800; font-style: italic\">// without using &#39; &amp; interface2&#39; we would not be able to use &#39;street&#39; property</span>\n    joinTypes({city: <span style=\"color: #0000FF\">&quot;city&quot;</span>, country: <span style=\"color: #0000FF\">&quot;country&quot;</span>, street: <span style=\"color: #0000FF\">&quot;street&quot;</span>})\n\n\n    <span style=\"color: #000080; font-weight: bold\">const</span> dobraSpoleczne = {\n      barmanska: <span style=\"color: #000080; font-weight: bold\">10</span>,\n      zupkaChinska: <span style=\"color: #000080; font-weight: bold\">5</span>,\n      bigMac: <span style=\"color: #000080; font-weight: bold\">20</span>,\n      kabelDoIphone: <span style=\"color: #000080; font-weight: bold\">1500</span>\n    }\n\n  }\n</pre></td></tr></table></div>\n",
    "generics1": "<!-- HTML generated using hilite.me --><div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><table><tr><td><pre style=\"margin: 0; line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17</pre></td><td><pre style=\"margin: 0; line-height: 125%\">    <span style=\"color: #008800; font-style: italic\">// Types - Generics</span>\n    <span style=\"color: #008800; font-style: italic\">// There is possibility to build very generic type for classes, objects or functions. We can use generic types</span>\n    <span style=\"color: #008800; font-style: italic\">// to implement undefined type when make for example function and define type later when call this function</span>\n    <span style=\"color: #008800; font-style: italic\">// We can reuse this function with different types!</span>\n\n    <span style=\"color: #008800; font-style: italic\">// ------------------------------------------------------------------</span>\n\n    <span style=\"color: #008800; font-style: italic\">// You can use &lt;T&gt; generic type and dedice later what kind of type to use</span>\n    <span style=\"color: #000080; font-weight: bold\">const</span> myGenericFunc1 = &lt;T&gt;(genericParam: <span style=\"color: #000080; font-weight: bold\">T</span>): <span style=\"color: #000080; font-weight: bold\">string</span> =&gt; <span style=\"color: #a61717; background-color: #e3d2d2\">`</span>generic param: <span style=\"color: #000080; font-weight: bold\">$</span>{genericParam}<span style=\"color: #a61717; background-color: #e3d2d2\">`</span>\n\n    <span style=\"color: #008800; font-style: italic\">// You can use explicit type &lt;string&gt; or let typescript infer your type</span>\n    console.log(<span style=\"color: #0000FF\">&#39;myGenericFunc: &#39;</span>, myGenericFunc1&lt;<span style=\"color: #000080; font-weight: bold\">string</span>&gt;(<span style=\"color: #0000FF\">&#39;string&#39;</span>))\n\n    <span style=\"color: #008800; font-style: italic\">// Other examples ...</span>\n    console.log(<span style=\"color: #0000FF\">&#39;myGenericFunc: &#39;</span>, myGenericFunc1&lt;<span style=\"color: #000080; font-weight: bold\">number</span>&gt;(<span style=\"color: #0000FF\">123</span>))\n    console.log(<span style=\"color: #0000FF\">&#39;myGenericFunc: &#39;</span>, myGenericFunc1&lt;<span style=\"color: #000080; font-weight: bold\">boolean</span>&gt;(<span style=\"color: #000080; font-weight: bold\">true</span>))\n    console.log(<span style=\"color: #0000FF\">&#39;myGenericFunc: &#39;</span>, myGenericFunc1&lt;(<span style=\"color: #000080; font-weight: bold\">string</span> | <span style=\"color: #000080; font-weight: bold\">number</span>)[]&gt;([<span style=\"color: #0000FF\">1</span>,<span style=\"color: #0000FF\">&#39;2&#39;</span>,<span style=\"color: #0000FF\">3</span>, <span style=\"color: #0000FF\">&#39;4&#39;</span>]))\n</pre></td></tr></table></div>\n",
    "generics2": "<!-- HTML generated using hilite.me --><div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><table><tr><td><pre style=\"margin: 0; line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20</pre></td><td><pre style=\"margin: 0; line-height: 125%\">    <span style=\"color: #000080; font-weight: bold\">interface</span> interface1 { val: <span style=\"color: #000080; font-weight: bold\">string</span> }\n\n    <span style=\"color: #000080; font-weight: bold\">interface</span> interface2 { val: <span style=\"color: #000080; font-weight: bold\">number</span> }\n\n    <span style=\"color: #000080; font-weight: bold\">const</span> obj1: <span style=\"color: #000080; font-weight: bold\">interface1</span> = { val: <span style=\"color: #0000FF\">&#39;myValue1&#39;</span>}\n    <span style=\"color: #000080; font-weight: bold\">const</span> obj2: <span style=\"color: #000080; font-weight: bold\">interface2</span> = { val: <span style=\"color: #000080; font-weight: bold\">123</span>}\n\n    <span style=\"color: #008800; font-style: italic\">// Here I have two generic types</span>\n    <span style=\"color: #000080; font-weight: bold\">const</span> myGenericFunc2 = &lt;T, U&gt;(obj: <span style=\"color: #000080; font-weight: bold\">T</span>, val: <span style=\"color: #000080; font-weight: bold\">U</span>): <span style=\"color: #000080; font-weight: bold\">string</span> =&gt; {\n      <span style=\"color: #000080; font-weight: bold\">const</span> someAction = (<span style=\"color: #000080; font-weight: bold\">typeof</span> val === <span style=\"color: #0000FF\">&#39;number&#39;</span>) ? val + 100 : <span style=\"color: #000080; font-weight: bold\">val</span>\n      <span style=\"color: #000080; font-weight: bold\">return</span> <span style=\"color: #a61717; background-color: #e3d2d2\">`</span>generic params: <span style=\"color: #000080; font-weight: bold\">$</span>{obj} - ${val}<span style=\"color: #a61717; background-color: #e3d2d2\">`</span>\n    }\n\n    <span style=\"color: #000080; font-weight: bold\">const</span> genFunc1 = myGenericFunc2&lt;interface1, <span style=\"color: #000080; font-weight: bold\">number</span>&gt;(obj1, <span style=\"color: #0000FF\">105</span>)\n    <span style=\"color: #000080; font-weight: bold\">const</span> genFunc2 = myGenericFunc2(obj2, <span style=\"color: #0000FF\">&#39;string value&#39;</span>)\n    <span style=\"color: #008800; font-style: italic\">// I can use explicit types for generic types also: &#39;&lt;interface2, string&gt;&#39;</span>\n    <span style=\"color: #008800; font-style: italic\">// const genFunc2 = myGenericFunc2&lt;interface2, string&gt;(obj2, &#39;string value&#39;)</span>\n\n    console.log(<span style=\"color: #0000FF\">&#39;myGenericFunc2: &#39;</span>, genFunc1)\n    console.log(<span style=\"color: #0000FF\">&#39;myGenericFunc2: &#39;</span>, genFunc2)\n</pre></td></tr></table></div>\n",
    "generics3": "<!-- HTML generated using hilite.me --><div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><table><tr><td><pre style=\"margin: 0; line-height: 125%\"> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26</pre></td><td><pre style=\"margin: 0; line-height: 125%\">    <span style=\"color: #000080; font-weight: bold\">const</span> myArray1: <span style=\"color: #000080; font-weight: bold\">string</span>[] = [<span style=\"color: #0000FF\">&#39;string1&#39;</span>, <span style=\"color: #0000FF\">&#39;string2&#39;</span>, <span style=\"color: #0000FF\">&#39;string3&#39;</span>, <span style=\"color: #0000FF\">&#39;string4&#39;</span>, <span style=\"color: #0000FF\">&#39;string5&#39;</span>]\n    <span style=\"color: #000080; font-weight: bold\">const</span> myArray2: <span style=\"color: #000080; font-weight: bold\">number</span>[] = [<span style=\"color: #0000FF\">1</span>, <span style=\"color: #0000FF\">2</span>, <span style=\"color: #0000FF\">3</span>, <span style=\"color: #0000FF\">4</span>, <span style=\"color: #0000FF\">5</span>]\n\n\n    <span style=\"color: #008800; font-style: italic\">// ...without using generic types I have to create two separate functions to work with &#39;string, number&#39; params</span>\n    <span style=\"color: #000080; font-weight: bold\">const</span> getRandomStringElem = (elems: <span style=\"color: #000080; font-weight: bold\">string</span>[]): <span style=\"color: #000080; font-weight: bold\">string</span> =&gt; {\n      <span style=\"color: #000080; font-weight: bold\">let</span> randomIndex = Math.floor(Math.random() * elems.length);\n      <span style=\"color: #000080; font-weight: bold\">return</span> elems[randomIndex]\n    }\n\n    <span style=\"color: #000080; font-weight: bold\">const</span> getRandomNumberElem = (elems: <span style=\"color: #000080; font-weight: bold\">number</span>[]): <span style=\"color: #000080; font-weight: bold\">number</span> =&gt; {\n      <span style=\"color: #000080; font-weight: bold\">let</span> randomIndex = Math.floor(Math.random() * elems.length);\n      <span style=\"color: #000080; font-weight: bold\">return</span> elems[randomIndex]\n    }\n\n    console.log(<span style=\"color: #0000FF\">&#39;getRandomStringElem: &#39;</span>, getRandomStringElem(myArray1))\n    console.log(<span style=\"color: #0000FF\">&#39;getRandomNumberElem: &#39;</span>, getRandomNumberElem(myArray2))\n\n    <span style=\"color: #008800; font-style: italic\">// using generic &lt;T&gt; type I can call this func with any type I want</span>\n    <span style=\"color: #000080; font-weight: bold\">const</span> getRandomGenericElem = &lt;T&gt;(elems: <span style=\"color: #000080; font-weight: bold\">T</span>[]): T =&gt; {\n      <span style=\"color: #000080; font-weight: bold\">let</span> randomIndex = Math.floor(Math.random() * elems.length);\n      <span style=\"color: #000080; font-weight: bold\">return</span> elems[randomIndex]\n    }\n\n    console.log(<span style=\"color: #0000FF\">&#39;getRandomGenericElem: &#39;</span>, getRandomGenericElem&lt;<span style=\"color: #000080; font-weight: bold\">string</span>&gt;(myArray1))\n    console.log(<span style=\"color: #0000FF\">&#39;getRandomGenericElem: &#39;</span>, getRandomGenericElem&lt;<span style=\"color: #000080; font-weight: bold\">number</span>&gt;(myArray2))\n</pre></td></tr></table></div>\n"
  }
